#!/usr/bin/env python3
"""
üöÄ Open Vocabulary Detection - Main Runner Script

Script t·ªïng h·ª£p ƒë·ªÉ ch·∫°y c√°c t√°c v·ª• ch√≠nh c·ªßa d·ª± √°n.
S·ª≠ d·ª•ng: python run.py [command]
"""

import sys
import os
import subprocess
import argparse

def run_command(cmd, description):
    """Ch·∫°y command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"\nüîÑ {description}")
    print("=" * 50)
    
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print("‚úÖ Th√†nh c√¥ng!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói: {e}")
        if e.stderr:
            print(f"Chi ti·∫øt: {e.stderr}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Open Vocabulary Detection Runner')
    parser.add_argument('command', choices=[
        'test', 'train', 'train-opt', 'compare', 'eval', 'all'
    ], help='Command to run')
    
    args = parser.parse_args()
    
    print("üéØ Open Vocabulary Detection")
    print("=" * 50)
    
    if args.command == 'test':
        success = run_command(
            "python scripts/quick_test.py",
            "Test nhanh model v√† memory"
        )
        
    elif args.command == 'train':
        success = run_command(
            "python scripts/train.py",
            "Training v·ªõi model g·ªëc"
        )
        
    elif args.command == 'train-opt':
        success = run_command(
            "python scripts/train_optimized.py", 
            "Training v·ªõi model t·ªëi ∆∞u (khuy·∫øn ngh·ªã)"
        )
        
    elif args.command == 'compare':
        success = run_command(
            "python scripts/compare_models.py",
            "So s√°nh hi·ªáu su·∫•t model c≈© vs m·ªõi"
        )
        
    elif args.command == 'eval':
        success = run_command(
            "python scripts/evaluate.py",
            "ƒê√°nh gi√° model ƒë√£ train"
        )
        
    elif args.command == 'all':
        print("üöÄ Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc...")
        
        steps = [
            ("python scripts/quick_test.py", "1. Test nhanh"),
            ("python scripts/compare_models.py", "2. So s√°nh hi·ªáu su·∫•t"),
            ("python scripts/train_optimized.py", "3. Training t·ªëi ∆∞u")
        ]
        
        for cmd, desc in steps:
            if not run_command(cmd, desc):
                print(f"‚ùå D·ª´ng t·∫°i b∆∞·ªõc: {desc}")
                break
        else:
            print("\nüéâ Ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc!")
            print("üìä Xem k·∫øt qu·∫£: tensorboard --logdir lightning_logs")
    
    if success:
        print(f"\n‚úÖ Ho√†n th√†nh: {args.command}")
    else:
        print(f"\n‚ùå L·ªói khi ch·∫°y: {args.command}")
        sys.exit(1)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print("üéØ Open Vocabulary Detection - Main Runner")
        print("=" * 50)
        print("S·ª≠ d·ª•ng:")
        print("  python run.py test        # Test nhanh")
        print("  python run.py train-opt   # Training t·ªëi ∆∞u (khuy·∫øn ngh·ªã)")
        print("  python run.py train       # Training g·ªëc")
        print("  python run.py compare     # So s√°nh hi·ªáu su·∫•t")
        print("  python run.py eval        # ƒê√°nh gi√° model")
        print("  python run.py all         # Ch·∫°y t·∫•t c·∫£")
        print("\nüìö Xem th√™m: HOW_TO_RUN.md")
    else:
        main()
